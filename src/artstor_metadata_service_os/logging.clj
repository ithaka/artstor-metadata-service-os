(ns artstor-metadata-service-os.logging
  (:require [org.ithaka.clj-iacauth.core :refer [get-session-id]]
            [clj-sequoia.logging :as captlog]
            [clojure.string :as str]
            [clojure.tools.logging :as logger]))

(defn trim-request-for-logging
  "Trim out just the parts of the request that we're interested in logging"
  [req]
  {:request-method (req :request-method)  :uri (req :uri) :query-string (req :query-string)
   :remote-addr (req :remote-addr) :headers (req :headers)})

(defn determine-event-type
  "Determines the type of event based on the Request Method and uri passed in"
  [req]
  (let [uri (req :uri)]
    (if (str/starts-with? uri "/api")
      (cond
        (and (= uri "/api/v1/items") (= (req :request-method) :post)) "artstor_get_items_with_POST"
        (and (= uri "/api/v1/items") (= (req :request-method) :get)) "artstor_get_items_with_GET"
        (= uri "/api/v1/metadata") "artstor_get_metadata"
        (str/starts-with? uri "/api/v1/metadata/legacy" ) "artstor_get_metadata_legacy_format"
        (= uri "/api/v1/items/resolve") "artstor_get_item_from_encrypted_objectid"
        (str/starts-with? uri "/api/v1/metadata/group" ) "artstor_get_metadata_for_group"
        (= uri "/api/v1/metadata/flush") "artstor_flush_metadata_from_cache"
        :else "artstor_general_metadata_api_event")
      :no-op  ;default uses ring logging only, does not log
      )))

(defn build-readable-request-log-message
  [req user action-type]
  (str "Received " action-type " request."))

(defn get-sessionid-from-cookies
  "Get sessionId from request for logging"
  [cookies]
  (let [access-session (get (cookies "AccessSession") :value)
        session-id (if (empty? access-session) "" (get-session-id access-session))]
    session-id))

(defn captains-log-data
  [req loggable-user]
  {
   ;requestid (autogenerated by clj-sequoia.logging)
   :uuid (get ((req :cookies) "UUID") :value)
   :sessionid (get-sessionid-from-cookies (:cookies req))
   :ip_address ((req :headers) "fastly-client-ip")
   :profileid (get loggable-user :profile_id)
   :institution_id (if-let [institutions (get loggable-user :institution_ids)] (first institutions) "")
   :user_agent ((req :headers) "user-agent")
   ;clientid  may not have LogContext in clojure?
   :referer ((req :headers) "referer")
   ;origin (generated by clj-sequoia.logging)
   ;tstamp_usec (generated by clj-sequoia.logging)
   :uri (req :uri)
   ;;custom for metadata-service
   :query-string (req :query-string)
   })

(defn wrap-web-logging
  "Middleware function to wrap logging around the request and write response to Captain's log for the /api calls"
  [client-func]
  (fn [req]
    (let [loggable-user (dissoc (req :user) :username)
          event-type (determine-event-type req)
          internal (re-find #"internal=true" (str (req :query-string)))]
      (if (not (= :no-op event-type)) (logger/info { :message (build-readable-request-log-message req loggable-user event-type) :user loggable-user :request (trim-request-for-logging req) }))
      (let [response (client-func req)]
        (if (not (= :no-op event-type))
          (captlog/captains-log! (if internal (str event-type "_internal") event-type) (assoc  (captains-log-data req loggable-user) :status (response :status))))
        response))))
